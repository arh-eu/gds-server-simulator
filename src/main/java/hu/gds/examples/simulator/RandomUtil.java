package hu.gds.examples.simulator;

import org.msgpack.value.Value;
import org.msgpack.value.impl.ImmutableNilValueImpl;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.function.Supplier;

public class RandomUtil {
    private RandomUtil() {
    }

    public static final ThreadLocalRandom RANDOM = ThreadLocalRandom.current();

    public static Integer randomInt(int lower, int upper) {
        return RANDOM.nextInt(lower, upper);
    }

    public static Integer randomInt(int upper) {
        return RANDOM.nextInt(upper);
    }

    public static Long randomLong(long lower, long upper) {
        return RANDOM.nextLong(lower, upper);
    }

    public static Long randomLong(long upper) {
        return RANDOM.nextLong(upper);
    }

    public static Double randomDouble(double lower, double upper) {
        return RANDOM.nextDouble(lower, upper);
    }

    public static Double randomDouble(double upper) {
        return RANDOM.nextDouble(upper);
    }

    public static Integer randomColor() {
        return (randomInt(255) << 16) | (randomInt(255) << 8) | randomInt(255);
    }

    public static String randomAlphaNumericString(int maxLength) {
        return RANDOM.ints(48, 122)
                .filter(i -> (i < 57 || i > 65) && (i < 90 || i > 97))
                .mapToObj(i -> (char) i)
                .limit(randomInt(maxLength) + 1)
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                .toString()
                .toUpperCase();
    }

    public static String randomPlate() {
        return randomAlphaNumericString(8);
    }

    public static String randomEventID() {
        return randomAlphaNumericString(25);
    }

    public static <T> T randomValue(Collection<T> collection) {
        return collection.stream().skip(randomLong(collection.size())).findFirst().orElse(null);
    }

    public static final List<String> nationalities = Arrays.asList("H", "A", "SK", "UA", "RO", "SRB", "HR", "SLO");

    public static final Supplier<Value> nullSupplier = ImmutableNilValueImpl::get;

    public static final String configDependent = "{this value depends on the system settings, is not pre-defined}";


    //9x9 BMP image
    private final static int[] bmpPixels = {
            // Offset 0x00000000 to 0x00000305
            0x42, 0x4d, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00,
            0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0x24, 0x1c, 0xed, 0x24, 0x1c, 0xed, 0x24, 0x1c,
            0xed, 0x24, 0x1c, 0xed, 0x24, 0x1c, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x00, 0xff, 0xff, 0xff, 0x24, 0x1c, 0xed, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24,
            0x1c, 0xed, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0x1c, 0xed, 0x24,
            0x1c, 0xed, 0xff, 0xff, 0xff, 0x24, 0x1c, 0xed, 0x24, 0x1c, 0xed, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x24, 0x1c, 0xed, 0x24, 0x1c, 0xed, 0xff, 0xff, 0xff, 0x24, 0x1c, 0xed,
            0x24, 0x1c, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00
    };

    //9x9 PNG image
    private final static int[] pngPixels = {
            // Offset 0x00000000 to 0x00000151
            0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
            0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x09,
            0x08, 0x06, 0x00, 0x00, 0x00, 0xe0, 0x91, 0x06, 0x10, 0x00, 0x00, 0x00,
            0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00,
            0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc,
            0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
            0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f, 0xa8, 0x64, 0x00,
            0x00, 0x00, 0x2d, 0x49, 0x44, 0x41, 0x54, 0x28, 0x53, 0x63, 0xf8, 0x4f,
            0x04, 0x20, 0x4d, 0xd1, 0x5b, 0x19, 0x15, 0x30, 0x46, 0x67, 0x83, 0x00,
            0x69, 0x8a, 0xf0, 0x01, 0xe2, 0x15, 0x21, 0x1b, 0x8d, 0x0c, 0x60, 0xe2,
            0x18, 0x6e, 0x42, 0xc6, 0x30, 0x40, 0x84, 0x75, 0xff, 0xff, 0x03, 0x00,
            0x18, 0xd8, 0x27, 0x9c, 0x9f, 0xb7, 0xe9, 0xa0, 0x00, 0x00, 0x00, 0x00,
            0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
    };


    public static byte[] getImagePixels(boolean sendBMP) throws IOException {
        int[] binaryData = sendBMP ? bmpPixels : pngPixels;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(baos);
        for (int pixel : binaryData) {
            dos.writeByte(pixel);
        }
        return baos.toByteArray();
    }
}
